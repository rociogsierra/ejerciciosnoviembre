#ejercicio 3

class nave():
    def __init__(self, nombre, largo, tripulacion, cantidad_de_pasajeros):
        self.nombre = nombre
        self.largo = largo
        self.tripulacion = tripulacion
        self.cantidad_de_pasajeros = cantidad_de_pasajeros
    def __str__(self):
        return f"nombre: {self.nombre} - largo: {self.largo} - tripulacion: {self.tripulacion} - cantidad de pasajeros: {self.cantidad_de_pasajeros}"

#los nombres de las naves los he buscado en internet por lo que no sé si son correctos (imagino que sí) y los datos me los he inventado

nave_1 = nave("Ala-X", 1000, 5, 10)
nave_2 = nave("Halcón Milenario", 40000, 7, 17)
nave_3 = nave("Caza TIE", 300, 1, 1)
nave_4 = nave("Destructor Estelar", 30000, 31, 9)
nave_5 = nave("Lanzadera Imperial", 3000, 4, 10)
nave_6 = nave("Nave Real Nubian 327 tipo J", 900, 6, 7)
nave_7 = nave("Nave de Control de Droides clase Lucrehulk", 2000, 7, 4)
nave_8 = nave("Supremacy", 4500, 10, 10)
nave_9 = nave("Speeders", 10, 1, 1)
nave_10 = nave("Estrella de la muerte", 30000, 40, 10)
nave_11 = nave("AT ST", 500, 2, 1)
nave_12 = nave("AT AT", 500, 1, 2)

naves = [nave_1, nave_2, nave_3, nave_4, nave_5, nave_6, nave_7, nave_8, nave_9, nave_10, nave_11, nave_12]
naves

#realizar un listado ordenado por nombre de las naves de manera ascendente y por largo de las mismas de manera descendente

def orden(lista_naves):
    lista_en_orden = sorted(lista_naves, key = lambda x: x.nombre.lower())
    lista_en_orden_copy = lista_en_orden.copy()
    lista_nombre_naves = [nave.nombre for nave in lista_en_orden]
    lista_largo_naves = [nave.largo for nave in lista_en_orden]

    letras_iniciales = [nave.nombre[0] for nave in lista_en_orden]
    for letra in set(letras_iniciales):
        posiciones = []
        for pos, nombre_nave in enumerate(lista_nombre_naves):
            if nombre_nave[0] == letra:
                posiciones.append(pos)
            if len(posiciones) > 1:
                largos = []
                for posicion in posiciones:
                    largos.append(lista_largo_naves[posicion])
                tabla_largos = dict(zip(largos, posiciones))
                posiciones_en_orden = []
                for k in sorted(tabla_largos.keys(), reverse = True):
                    posiciones_en_orden.append(tabla_largos[k])
                ordenado = zip(posiciones[:len(posiciones)//2], posiciones_en_orden[:len(posiciones)//2])

                for posicion_desordenada, posicion_ordenada in ordenado.items():
                    elemento = lista_en_orden[posicion_desordenada]
                    lista_en_orden_copy[posicion_desordenada] = lista_en_orden_copy[posicion_ordenada]
                    lista_en_orden_copy[posicion_ordenada] = elemento
    return lista_en_orden_copy

#APARTADO 1
#mostrar toda la información del “Halcón Milenario” y la “Estrella de la Muerte”

[(nave.nombre, nave.largo) for nave in orden(naves)]

#APARTADO 2
#determinar cuáles son las cinco naves con mayor cantidad de pasajeros

def mayor_numero_de_pasajeros(naves):
    naves_en_orden = sorted(naves, key = lambda x: x.cantidad_de_pasajeros, reverse = True)
    #pide cinco naves por tanto el rango es cinco
    for i in range(5):
        print(i+1, naves_en_orden[i])
mayor_numero_de_pasajeros(naves)

#APARTADO 3
#indicar cuál es la nave que requiere mayor cantidad de tripulación

def mayor_cantidad_de_tripulacion(naves):
    mayor_cantidad_de_tripulacion = 0
    for nave in naves:
        if nave.tripulacion > mayor_cantidad_de_tripulacion:
            mayor_cantidad_de_tripulacion = nave.tripulacion
            nueva_con_mayor_cantidad_de_tripulacion = nave
    print(nave_con_mayor_cantidad_de_tripulacion)
mayor_cantidad_de_tripulacion(naves)

#APARTADO 4
#mostrar todas las naves que comienzan con AT

def AT(naves):
    flag = False
    for nave in naves:
        if nave.nombre.lower()[:2] == "AT":
            flag = True
            print(nave)
    if flag == False:
        print("Ninguna de las naves comienza con AT")
AT(naves)

#APARTADO 5
#listar todas las naves que pueden llevar seis o más pasajeros

def mayor_numero_de_pasajeros(naves):
    for nave in naves:
        if nave.cantidad_de_pasajeros >= 6:
            print(nave)
mayor_numero_de_pasajeros(naves)




